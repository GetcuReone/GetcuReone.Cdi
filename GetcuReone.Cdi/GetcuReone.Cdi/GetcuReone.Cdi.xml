<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GetcuReone.Cdi</name>
    </assembly>
    <members>
        <member name="T:GetcuReone.Cdi.CdiHelper">
            <summary>
            Common domain infrastructure helper.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.CdiHelper.CreateFactFactory``1(GetcuReone.ComboPatterns.Interfaces.IAbstractFactory)">
            <summary>
            Create fact factory.
            </summary>
            <typeparam name="TRulesProvider"></typeparam>
            <param name="factory"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.CdiHelper.UpdateFact``1(GetcuReone.FactFactory.Versioned.BaseEntities.VersionedFactContainerBase,``0)">
            <summary>
            Update or add fact.
            </summary>
            <typeparam name="TFact"></typeparam>
            <param name="container"></param>
            <param name="fact"></param>
        </member>
        <member name="M:GetcuReone.Cdi.CdiHelper.ToReadOnlyCollection``1(System.Collections.Generic.IList{``0})">
            <summary>
            To <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.CdiHelper.EqualsOrdinal(System.String,System.String)">
            <summary>
            <see cref="M:System.String.Equals(System.String)"/> with <see cref="F:System.StringComparison.Ordinal"/>.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.CdiHelper.EqualsOrdinalIgnoreCase(System.String,System.String)">
            <summary>
            <see cref="M:System.String.Equals(System.String)"/> with <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.CdiHelper.CreateException(System.String,System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="code">error code.</param>
            <param name="reason">error reason.</param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.CdiHelper.CreateException(System.Collections.Generic.List{GetcuReone.Cdm.Errors.ErrorDetail})">
            <summary>
            Create exception.
            </summary>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.CdiHelper.MayBeNull``1(System.Collections.Generic.List{``0})">
            <summary>
            If the <paramref name="items"/> is null it will create a new empty list.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.CdiHelper.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Is null or empty.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.Cdi.FactFactory.GrFactFactory">
            <summary>
            Fact factory.
            </summary>
        </member>
        <member name="P:GetcuReone.Cdi.FactFactory.GrFactFactory.Rules">
            <summary>
            Rule collection.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrFactFactory.#ctor(GetcuReone.Cdi.FactFactory.GrFactRulesProviderBase)">
            <summary>
            Constructor.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrFactFactory.GetDefaultFacts(GetcuReone.FactFactory.Interfaces.Context.IWantActionContext{GetcuReone.FactFactory.Entities.WantAction,GetcuReone.FactFactory.Versioned.Entities.VersionedFactContainer})">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrFactFactory.CreateWantAction(System.Action{System.Collections.Generic.IEnumerable{GetcuReone.FactFactory.Interfaces.IFact}},System.Collections.Generic.List{GetcuReone.FactFactory.Interfaces.IFactType},GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrFactFactory.CreateWantAction(System.Func{System.Collections.Generic.IEnumerable{GetcuReone.FactFactory.Interfaces.IFact},System.Threading.Tasks.ValueTask},System.Collections.Generic.List{GetcuReone.FactFactory.Interfaces.IFactType},GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrFactFactory.GetDefaultContainer">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrFactFactory.GetSingleEntityOperations">
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.Cdi.FactFactory.GrFactRulesProviderBase">
            <summary>
            Base class for provider.
            </summary>
        </member>
        <member name="P:GetcuReone.Cdi.FactFactory.GrFactRulesProviderBase.Factory">
            <summary>
            Factory.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrFactRulesProviderBase.GetAdapter``1">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrFactRulesProviderBase.GetFacade``1">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrFactRulesProviderBase.GetDefaultFacts">
            <summary>
            Get default facts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrFactRulesProviderBase.GetRules">
            <summary>
            Get rules.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.Cdi.FactFactory.GrSingleEntityOperationsFacade">
            <inheritdoc/>
            <remarks>Added logging.</remarks>
        </member>
        <member name="P:GetcuReone.Cdi.FactFactory.GrSingleEntityOperationsFacade.NLogger">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrSingleEntityOperationsFacade.WriteLog(NLog.LogMessageGenerator)">
            <summary>
            Write log.
            </summary>
            <param name="messageFunc"></param>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrSingleEntityOperationsFacade.CalculateFact``3(GetcuReone.FactFactory.Interfaces.Operations.Entities.NodeByFactRule{``0},GetcuReone.FactFactory.Interfaces.Context.IWantActionContext{``1,``2})">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrSingleEntityOperationsFacade.CalculateFactAsync``3(GetcuReone.FactFactory.Interfaces.Operations.Entities.NodeByFactRule{``0},GetcuReone.FactFactory.Interfaces.Context.IWantActionContext{``1,``2})">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrSingleEntityOperationsFacade.DeriveWantFacts``2(GetcuReone.FactFactory.Interfaces.Operations.Entities.WantActionInfo{``0,``1})">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrSingleEntityOperationsFacade.DeriveWantFactsAsync``2(GetcuReone.FactFactory.Interfaces.Operations.Entities.WantActionInfo{``0,``1})">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.Cdi.FactFactory.GrSingleEntityOperationsFacade.GetAdapter``1">
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.Cdi.GrAdapterBase">
            <summary>
            Base class for adapters.
            </summary>
        </member>
        <member name="P:GetcuReone.Cdi.GrAdapterBase.AdapterName">
            <summary>
            Adapter name.
            </summary>
        </member>
        <member name="P:GetcuReone.Cdi.GrAdapterBase.NLogger">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterBase.WriteLog(NLog.LogMessageGenerator)">
            <summary>
            Write log.
            </summary>
            <param name="messageFunc"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterBase.CallMethodLogging(System.String)">
            <summary>
            Logs a method call without parameters.
            </summary>
            <param name="methodName"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterBase.CallMethodLogging``1(``0,System.String)">
            <summary>
            Logs a method call with parameter.
            </summary>
            <typeparam name="TParameter"></typeparam>
            <param name="methodName"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterBase.ReturnLogging(System.String)">
            <summary>
            Logs no response.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterBase.ReturnLogging``1(``0,System.String)">
            <summary>
            Logs the result of a method.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="returnedObj"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterBase.ReturnNotLogging``1(``0,System.String)">
            <summary>
            Add information to the log that the object is not logged.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="returnedObj"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.Cdi.GrAdapterProxyBase`1">
            <summary>
            Base class for adapters.
            </summary>
        </member>
        <member name="P:GetcuReone.Cdi.GrAdapterProxyBase`1.AdapterName">
            <summary>
            Adapter name.
            </summary>
        </member>
        <member name="P:GetcuReone.Cdi.GrAdapterProxyBase`1.NLogger">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`1.#ctor(System.Func{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="createProxyFunc"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`1.WriteLog(NLog.LogMessageGenerator)">
            <summary>
            Write log.
            </summary>
            <param name="messageFunc"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`1.CallMethodLogging(System.String)">
            <summary>
            Logs a method call without parameters.
            </summary>
            <param name="methodName"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`1.CallMethodLogging``1(``0,System.String)">
            <summary>
            Logs a method call with parameter.
            </summary>
            <typeparam name="TParameter"></typeparam>
            <param name="methodName"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`1.ReturnLogging(System.String)">
            <summary>
            Logs no response.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`1.ReturnLogging``1(``0,System.String)">
            <summary>
            Logs the result of a method.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="returnedObj"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`1.ReturnNotLogging``1(``0,System.String)">
            <summary>
            Add information to the log that the object is not logged.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="returnedObj"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.Cdi.GrAdapterProxyBase`2">
            <summary>
            Base class for adapters.
            </summary>
        </member>
        <member name="P:GetcuReone.Cdi.GrAdapterProxyBase`2.AdapterName">
            <summary>
            Adapter name.
            </summary>
        </member>
        <member name="P:GetcuReone.Cdi.GrAdapterProxyBase`2.NLogger">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`2.#ctor(System.Func{`1,`0})">
            <summary>
            Constructor.
            </summary>
            <param name="createProxyFunc"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`2.WriteLog(NLog.LogMessageGenerator)">
            <summary>
            Write log.
            </summary>
            <param name="messageFunc"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`2.CallMethodLogging(System.String)">
            <summary>
            Logs a method call without parameters.
            </summary>
            <param name="methodName"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`2.CallMethodLogging``1(``0,System.String)">
            <summary>
            Logs a method call with parameter.
            </summary>
            <typeparam name="TParameter"></typeparam>
            <param name="methodName"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`2.ReturnLogging(System.String)">
            <summary>
            Logs no response.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`2.ReturnLogging``1(``0,System.String)">
            <summary>
            Logs the result of a method.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="returnedObj"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.GrAdapterProxyBase`2.ReturnNotLogging``1(``0,System.String)">
            <summary>
            Add information to the log that the object is not logged.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="returnedObj"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.Cdi.GrFacadeBase">
            <summary>
            Base clas for facades.
            </summary>
        </member>
        <member name="P:GetcuReone.Cdi.GrFacadeBase.FacadeName">
            <summary>
            Facade name.
            </summary>
        </member>
        <member name="P:GetcuReone.Cdi.GrFacadeBase.NLogger">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.GrFacadeBase.WriteLog(NLog.LogMessageGenerator)">
            <summary>
            Write log.
            </summary>
            <param name="messageFunc"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrFacadeBase.CallMethodLogging(System.String)">
            <summary>
            Logs a method call without parameters.
            </summary>
            <param name="methodName"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrFacadeBase.CallMethodLogging``1(``0,System.String)">
            <summary>
            Logs a method call with parameter.
            </summary>
            <typeparam name="TParameter"></typeparam>
            <param name="methodName"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrFacadeBase.ReturnLogging(System.String)">
            <summary>
            Logs no response.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.GrFacadeBase.ReturnLogging``1(``0,System.String)">
            <summary>
            Logs the result of a method.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="returnedObj"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.GrFacadeBase.ReturnNotLogging``1(``0,System.String)">
            <summary>
            Add information to the log that the object is not logged.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="returnedObj"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.GrFacadeBase.GetAdapter``1">
            <summary>
            Get adapter.
            </summary>
            <typeparam name="TAdapter"></typeparam>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.Cdi.GrFactoryBase">
            <inheritdoc/>
            <remarks>Added logging.</remarks>
        </member>
        <member name="P:GetcuReone.Cdi.GrFactoryBase.FactoryName">
            <summary>
            Factory name.
            </summary>
        </member>
        <member name="P:GetcuReone.Cdi.GrFactoryBase.NLogger">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.GrFactoryBase.GetAdapter``1">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.Cdi.GrFactoryBase.GetFacade``1">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.Cdi.GrFactoryBase.GetFactFactory``1(System.Boolean)">
            <summary>
            Get fact factory.
            </summary>
            <typeparam name="TFactRulesProvider"></typeparam>
            <param name="needNewFactory"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.GrFactoryBase.WriteLog(NLog.LogMessageGenerator)">
            <summary>
            Write log.
            </summary>
            <param name="messageFunc"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrFactoryBase.CallMethodLogging(System.String)">
            <summary>
            Logs a method call without parameters.
            </summary>
            <param name="methodName"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrFactoryBase.CallMethodLogging``1(``0,System.String)">
            <summary>
            Logs a method call with parameter.
            </summary>
            <typeparam name="TParameter"></typeparam>
            <param name="methodName"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:GetcuReone.Cdi.GrFactoryBase.ReturnLogging(System.String)">
            <summary>
            Logs no response.
            </summary>
        </member>
        <member name="M:GetcuReone.Cdi.GrFactoryBase.ReturnLogging``1(``0,System.String)">
            <summary>
            Logs the result of a method.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="returnedObj"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.Cdi.GrFactoryBase.ReturnNotLogging``1(``0,System.String)">
            <summary>
            Add information to the log that the object is not logged.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="returnedObj"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
